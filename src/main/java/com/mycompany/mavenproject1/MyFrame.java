 /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.mavenproject1;

import com.mycompany.mavenproject1.model.InvoiceHeader;
import com.mycompany.mavenproject1.model.InvoiceHeaderTableModel;
import com.mycompany.mavenproject1.model.InvoiceLine;
import com.mycompany.mavenproject1.model.InvoiceLineTableModel;
import com.mycompany.mavenproject1.model.view.HeaderDialog;
import com.mycompany.mavenproject1.model.view.LineDialog;
import java.util.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Assem
 */
public class MyFrame extends javax.swing.JFrame implements ActionListener, ListSelectionListener {

    /**
     * Creates new form MyFrame
     */
    public MyFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InvoicesTable = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        invoiceTable = new javax.swing.JTable();
        invoiceTable.getSelectionModel().addListSelectionListener(this);
        createInvtBtn = new javax.swing.JButton();
        createInvtBtn.addActionListener(this);
        deleteInvBtn = new javax.swing.JButton();
        deleteInvBtn.addActionListener(this);
        invNumberLable = new javax.swing.JLabel();
        invNumValTable = new javax.swing.JLabel();
        InvDateLable = new javax.swing.JLabel();
        invCustomerNameLable = new javax.swing.JLabel();
        invTotalLabel = new javax.swing.JLabel();
        invTotalValLable = new javax.swing.JLabel();
        invDateValTxt = new javax.swing.JTextField();
        invCustomerNameValTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lineTable = new javax.swing.JTable();
        createNewLineBtn = new javax.swing.JButton();
        createNewLineBtn.addActionListener(this);
        deleteLineBtn = new javax.swing.JButton();
        deleteLineBtn.addActionListener(this);
        jMenuBar1 = new javax.swing.JMenuBar();
        menuBar = new javax.swing.JMenu();
        loadItem = new javax.swing.JMenuItem();
        loadItem.addActionListener(this);
        saveItem = new javax.swing.JMenuItem();
        saveItem.addActionListener(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Incoices");

        InvoicesTable.setText("Invoices");

        invoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invoiceTable.setToolTipText("");
        jScrollPane1.setViewportView(invoiceTable);

        createInvtBtn.setText("Create new Invoice");
        createInvtBtn.setActionCommand("createNewInvoice");

        deleteInvBtn.setText("Delete Invoive");
        deleteInvBtn.setActionCommand("deleteInvoice");
        deleteInvBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteInvBtnActionPerformed(evt);
            }
        });

        invNumberLable.setText("Invoice Number");

        InvDateLable.setText("Invoice Date");

        invCustomerNameLable.setText("Invoice Customer Name");

        invTotalLabel.setText("Invoice total");

        invDateValTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invDateValTxtActionPerformed(evt);
            }
        });

        invCustomerNameValTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invCustomerNameValTxtActionPerformed(evt);
            }
        });

        jLabel8.setText("Invoice Deteles");

        lineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Invoice Number", "Invoice Date", "Customer Name", "Invoice Total"
            }
        ));
        jScrollPane2.setViewportView(lineTable);

        createNewLineBtn.setText("Create New Line");
        createNewLineBtn.setActionCommand("createNewLine");
        createNewLineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewLineBtnActionPerformed(evt);
            }
        });

        deleteLineBtn.setText("Delete Line");
        deleteLineBtn.setActionCommand("deleteLine");
        deleteLineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteLineBtnActionPerformed(evt);
            }
        });

        menuBar.setText("File");

        loadItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        loadItem.setText("Load File");
        loadItem.setActionCommand("loadFile");
        loadItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadItemActionPerformed(evt);
            }
        });
        menuBar.add(loadItem);

        saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveItem.setText("Save File");
        saveItem.setActionCommand("saveFile");
        menuBar.add(saveItem);

        jMenuBar1.add(menuBar);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(createNewLineBtn)
                .addGap(35, 35, 35)
                .addComponent(deleteLineBtn)
                .addGap(186, 186, 186))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(createInvtBtn)
                        .addGap(18, 18, 18)
                        .addComponent(deleteInvBtn))
                    .addComponent(InvoicesTable, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(invNumberLable, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(InvDateLable, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(invNumValTable, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(invTotalValLable, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(invDateValTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                                    .addComponent(invCustomerNameValTxt)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(invCustomerNameLable))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(invTotalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(InvoicesTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(invNumberLable)
                            .addComponent(invNumValTable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InvDateLable)
                            .addComponent(invDateValTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(invCustomerNameValTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(invCustomerNameLable))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(invTotalLabel)
                            .addComponent(invTotalValLable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(createNewLineBtn)
                            .addComponent(deleteLineBtn))
                        .addGap(80, 80, 80))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteInvBtn)
                            .addComponent(createInvtBtn))
                        .addGap(26, 26, 26))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loadItemActionPerformed

    private void deleteInvBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteInvBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteInvBtnActionPerformed

    private void invDateValTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invDateValTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_invDateValTxtActionPerformed

    private void invCustomerNameValTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invCustomerNameValTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_invCustomerNameValTxtActionPerformed

    private void createNewLineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewLineBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_createNewLineBtnActionPerformed

    private void deleteLineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLineBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteLineBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel InvDateLable;
    private javax.swing.JLabel InvoicesTable;
    private javax.swing.JButton createInvtBtn;
    private javax.swing.JButton createNewLineBtn;
    private javax.swing.JButton deleteInvBtn;
    private javax.swing.JButton deleteLineBtn;
    private javax.swing.JLabel invCustomerNameLable;
    private javax.swing.JTextField invCustomerNameValTxt;
    private javax.swing.JTextField invDateValTxt;
    private javax.swing.JLabel invNumValTable;
    private javax.swing.JLabel invNumberLable;
    private javax.swing.JLabel invTotalLabel;
    private javax.swing.JLabel invTotalValLable;
    private javax.swing.JTable invoiceTable;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable lineTable;
    private javax.swing.JMenuItem loadItem;

    private javax.swing.JMenu menuBar;
    private javax.swing.JMenuItem saveItem;
    // End of variables declaration//GEN-END:variables
    private DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
    private ArrayList<InvoiceHeader> invoiceHeaderLists = new ArrayList<>();
    private InvoiceHeaderTableModel headerTableModel;
    private InvoiceLineTableModel invoiceLieTableModel;
    private HeaderDialog headerDialog;
    private LineDialog lineDialog;
    public JTable getLineTable() {
        return lineTable;
    }

    public JLabel getInvoicesTable() {
        return InvoicesTable;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        switch (e.getActionCommand()) {
            case "loadFile":
                loadFile();
                break;
            case "saveFile":saveData();
                break;
            case "createNewInvoice":showNewInvoDialog();break;
            case "deleteInvoice":deleteInvoice();break;
            case "createNewLine":showLineDialog();
            case "deleteLine":deleteLine();break;
            case "okCreateIvoice":okCreateIvoice();
            case "cancleCreateInvoice":cancleCreateInvoice(headerDialog); break;
            case "okCreateline":okCreateline();
            case "cancleCreateline":cancleCreateInvoice(lineDialog);break;
            default:
                System.out.println("no Action");
        }

    }

    private void loadFile() {
        JOptionPane.showMessageDialog(this, "Please, select Header file!", "Attention", JOptionPane.WARNING_MESSAGE);
        JFileChooser openFile = new JFileChooser();
        int result = openFile.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File headerFile = openFile.getSelectedFile();
            try {
                FileReader fr = new FileReader(headerFile);
                BufferedReader br = new BufferedReader(fr);

                for (int i = 0; i < 2; i++) {
                    // while( br.readLine() != null){
                    String line = br.readLine();
                    String[] headerParts = line.split(",");
                    int invNum = Integer.parseInt(headerParts[0]);
                    Date invoiceDate = dateFormat.parse(headerParts[1]);
                    String customerName = headerParts[2];
                    InvoiceHeader invoicerHeader = new InvoiceHeader(invNum, customerName, invoiceDate);
                    invoiceHeaderLists.add(invoicerHeader);
                }
                JOptionPane.showMessageDialog(this, "Please, select Line file!", "Attention", JOptionPane.WARNING_MESSAGE);
                openFile.showOpenDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File LinesFile = openFile.getSelectedFile();
                    BufferedReader brLine = new BufferedReader(new FileReader(LinesFile));
                    String linesLine= null;
                    while ((linesLine = brLine.readLine()) != null) {
                        String[] lineParts = linesLine.split(",");
                        int invNum = Integer.parseInt(lineParts[0]);
                        String itemName = lineParts[1];
                        double itemPrice = Double.parseDouble(lineParts[2]);
                        int itemCount = Integer.parseInt(lineParts[3]);
                        InvoiceHeader header = findInvoiceByNum(invNum);
                        InvoiceLine invLine = new InvoiceLine(itemName, itemPrice, itemCount, header);
                        header.getInvoiceLines().add(invLine);
                        System.out.println("HHH: "+header.toString());
                        System.out.println("LLL: "+header.invoiceLines);
                        headerTableModel = new InvoiceHeaderTableModel((ArrayList<InvoiceHeader>) invoiceHeaderLists);
                        invoiceTable.setModel(headerTableModel);
                        InvDateLable.validate();

                    }
                }

                for (InvoiceHeader invo : invoiceHeaderLists) {
                    System.out.println(invo.toString());

                }
                headerTableModel = new InvoiceHeaderTableModel(invoiceHeaderLists);
            } catch (Exception ex) {
                ex.printStackTrace();
            }

        }

    }

    private InvoiceHeader findInvoiceByNum(int invNum) {
        InvoiceHeader invoiceHeader = null;
        for (InvoiceHeader inv : invoiceHeaderLists) {
            if (inv.getNum() == invNum) {
                invoiceHeader = inv;
                break;
            }

        }

        return invoiceHeader;
    }

    public InvoiceHeaderTableModel getHeaderTableModel() {
        return headerTableModel;
    }

    public void setHeaderTableModel(InvoiceHeaderTableModel headerTableModel) {
        this.headerTableModel = headerTableModel;
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        
        invoiceTableSelected();
    }

    private void invoiceTableSelected() {
        int selectedRowIndex = invoiceTable.getSelectedRow();
        if (selectedRowIndex >= 0) {
            InvoiceHeader row = headerTableModel.getInvoicesArray().get(selectedRowIndex);
            //System.err.println("***"+row.invoiceLines.get(1) );
            invCustomerNameValTxt.setText(""+row.getCustomerName());
            invDateValTxt.setText(""+row.getInvoiceDate());
            invNumValTable.setText(""+row.getNum());
            
            invTotalValLable.setText(""+row.getLineTotal());
            ArrayList<InvoiceLine> lines = row.getInvoiceLines();
            invoiceLieTableModel = new InvoiceLineTableModel(lines);

            for (InvoiceLine line:lines) {
                 
                System.out.println(line.toString());
                
            }
            lineTable.setModel(invoiceLieTableModel);
            invoiceLieTableModel.fireTableDataChanged();
             
           
        }
    }

    private void showNewInvoDialog() {
        headerDialog =new HeaderDialog (this);
        headerDialog.setVisible(true);
    }

    private void cancleCreateInvoice(JDialog dialog) {
         dialog.setVisible(false);
         dialog.dispose();
         
    }

    private void okCreateIvoice() {
       String cusName = headerDialog.getCustmorNameFiled().getText();
       String invDateString = headerDialog.getInvoDateFiled().getText();
       try{
           Date invDate = dateFormat.parse(invDateString);
           int invNum = getNextInvNumber();
           InvoiceHeader newInvoiceHeader = new InvoiceHeader(invNum,cusName,invDate);
           invoiceHeaderLists.add(newInvoiceHeader);
           invoiceTable.setModel(headerTableModel);
           headerTableModel.fireTableDataChanged();
           
           
          
    }catch(Exception e){
       e.printStackTrace();
    }
    } 
    private int getNextInvNumber(){
        int max=0;
        for (InvoiceHeader header : invoiceHeaderLists) {
                  if(header.getNum()>max){
                    max = header.getNum(); 
                  }
                }
        return max +1;
    }

    private void showLineDialog() {
        lineDialog = new LineDialog(this);
        lineDialog.setVisible(true);
        System.err.println("DDDDDDDDDDDDDDDDDD");
    }

    private void cancleCreateline() {
       
    }

    private void okCreateline() {
    String ItemName = lineDialog.getItemNameField().getText();
    int itemCount =Integer.parseInt( lineDialog.getItemCountField().getText());
   double itemPrice =Double.parseDouble( lineDialog.getItemPriceField().getText());
   int headerIndex = invoiceTable.getSelectedRow();
   InvoiceHeader header = headerTableModel.getInvoicesArray().get(headerIndex);
   InvoiceLine invoiceLine = new InvoiceLine(ItemName, itemPrice, itemCount, header);
   header.addLine(invoiceLine);
   invoiceLieTableModel.fireTableDataChanged();
   headerTableModel.fireTableDataChanged();
    
   invTotalValLable.setText(""+header.getLineTotal());
  
    }

    private void deleteLine() {
       int lineIndex = lineTable.getSelectedRow();
       InvoiceLine line = invoiceLieTableModel.getinvoicesLines().remove(lineIndex);
       invoiceLieTableModel.fireTableDataChanged();
       headerTableModel.fireTableDataChanged();
       invTotalValLable.setText(""+line.getInvoiceHeader().getLineTotal());
       
    }

    private void deleteInvoice() {
        int invIndex = invoiceTable.getSelectedRow();
        InvoiceHeader header= headerTableModel.getInvoicesArray().get(invIndex);
        headerTableModel.getInvoicesArray().remove(invIndex);
        //invoiceLieTableModel = new InvoiceLineTableModel(new ArrayList<InvoiceLine>())
           invoiceTable.setModel(headerTableModel);
           headerTableModel.fireTableDataChanged();
           invCustomerNameValTxt.setText("");
            invDateValTxt.setText("");
            invNumValTable.setText("");   
            invTotalValLable.setText("");
        
    }


    private void saveData() {
        String headers ="";
        String lines ="";
                for(InvoiceHeader header : invoiceHeaderLists){
                    headers += header.getDataCsv();
                    headers += "\n"; 
                    for(InvoiceLine line : header.getInvoiceLines()){
                        lines += line.getDataCsv();
                        lines += "\n";
                    }
                } 

                 JOptionPane.showMessageDialog(this, "Please, select file to save headers data!", "Attention", JOptionPane.WARNING_MESSAGE);
                    JFileChooser fc = new JFileChooser();
                    int result = fc.showSaveDialog(this);
               if( result == JFileChooser.APPROVE_OPTION){
                   File fileHeader = fc.getSelectedFile();
                   try{
                        FileWriter hfw = new FileWriter(fileHeader);
                        hfw.write(headers);
                         hfw.flush();
                         hfw.close();
                        JOptionPane.showMessageDialog(this, "Please, select file to save Lines data!", "Attention", JOptionPane.WARNING_MESSAGE);
                        result = fc.showSaveDialog(this);
                        if( result == JFileChooser.APPROVE_OPTION){
                         File fileLine = fc.getSelectedFile();
                         FileWriter lfw = new FileWriter(fileLine);
                         lfw.write(lines);
                         lfw.flush();
                         lfw.close();
                        }
                        
                   }catch(Exception e){}
                   
    
} 
              
    }

     
       
}
